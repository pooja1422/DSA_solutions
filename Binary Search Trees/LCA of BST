Given a binary search tree and data of two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the BST.
LCA
LCA of two nodes A and B is the lowest or deepest node which has both A and B as its descendants. 
Sample Input 1:
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2 10
Sample Output 1:
8

public class Solution {

	/*
	 * Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> { T data; BinaryTreeNode<T> left; BinaryTreeNode<T> right;
	 * 
	 * public BinaryTreeNode(T data) { this.data = data; } }
	 */


	
	public static int getLCA(BinaryTreeNode<Integer> root, int a, int b) {
		if(root==null)
            return -1;
         int c=-1;
        if(root.data==a || root.data==b)
            return root.data;
        else if(a<root.data && b>root.data || a>root.data && b<root.data)
        {
             c=getLCA(root.left,a,b);
            int d=getLCA(root.right,a,b);
            if(c==-1 && d==-1)
                return -1;
            else if(c==-1 && d!=-1)
                return  d;
            else if(c!=-1 && d==-1)
                return c;
            else
                return root.data;
        }

         else if(a<root.data &&b<root.data)
        {
             c=getLCA(root.left,a,b);
        }
       else if(a>root.data &&b>root.data)
        {
             c=getLCA(root.right,a,b);
        }

        if(c!=-1)
            return c;
         else
            return -1;

	}
}
