It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3

public class Solution {

    static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

	public static int dfs(String[] edge, int n) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
		
        boolean[][] visited= new boolean[n][edge[0].length()];
        int maxCount=0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<edge[0].length() ; j++){
                if(!visited[i][j] && edge[i].charAt(j)=='1'){
                    int count= largestpiece(edge, i,j, visited);
                    if(count>maxCount){
                        maxCount= count;
                    }
                }
            }
        }
        return maxCount;
	}
    
     public static boolean check(String[] edge, int i, int j){
         if((i>= edge.length) || (i<0) || (j>=edge[0].length()) || (j<0))
             return false;
        return true;
    }

    public static int largestpiece(String[] edge,int i, int j, boolean[][] visited){
        
        int count=0;
        visited[i][j]= true;
        
       if(check(edge,i-1,j) && edge[i-1].charAt(j)=='1' && !visited[i-1][j]){
        	count+= largestpiece(edge, i-1, j, visited);
       	 }
        if(check(edge,i+1,j) && edge[i+1].charAt(j)=='1' && !visited[i+1][j]){
        	 count+= largestpiece(edge, i+1, j, visited);
       	 }
        
        if(check(edge,i,j+1) && edge[i].charAt(j+1)=='1' && !visited[i][j+1]){
        	 count+= largestpiece(edge, i,j+1, visited);
       	 }
        if(check(edge,i,j-1) && edge[i].charAt(j-1)=='1' && !visited[i][j-1]){
        	 count+= largestpiece(edge, i,j-1, visited);
       	 }
       
        return count+1;
	}


}
