You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer 'N', denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.
Output Format :
Print the running median for every integer added to the running list in one line (space-separated).
Input Constraints
0 <= N <= 10 ^ 5
1 <= ARR[i] <= 10 ^ 5

Time Limit: 1 sec
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6 4 2 2 3 4
Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 2 :
5
5 4 3 2 1
Sample Output 2 :
5 4 4 3 3
##Main code:
public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[] takeInput() throws IOException {
        int size = Integer.parseInt(br.readLine().trim());
        int[] input = new int[size];

        if (size == 0) {
            return input;
        }
        
		String[] strNums;
		strNums = br.readLine().split("\\s");
		
        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }

        return input;
    }

    public static void printArray(int[] arr) {
        for (int element : arr) {
            System.out.print(element + " ");
        }

        System.out.println();
    }

    public static void main(String[] args) throws NumberFormatException, IOException {


        int[] arr = takeInput();
        Solution.findMedian(arr);


    }
}

function code:

import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {

	public static void findMedian(int arr[])  {
        
        if(arr.length==0){
            return;
        }
        
        PriorityQueue<Integer> minpq= new PriorityQueue<>();
        PriorityQueue<Integer> maxpq= new PriorityQueue<>(Collections.reverseOrder());
        
        maxpq.add(arr[0]);
        
        System.out.print(arr[0]+" ");
        
        for(int i=1; i<arr.length; i++){
            if(arr[i]<maxpq.peek()){
                maxpq.add(arr[i]);
            }
            else{
                minpq.add(arr[i]);
            }
            
            if(maxpq.size()- minpq.size()>1){
                minpq.add(maxpq.remove());
            }
            else if(minpq.size()-maxpq.size()>1){
                maxpq.add(minpq.remove());
            }
            
            if((minpq.size()+maxpq.size())%2==0){
                int median= (maxpq.peek()+ minpq.peek())/2;
                System.out.print(median+" ");
            }
            else{
                if(minpq.size()>maxpq.size()){
                    System.out.print(minpq.peek()+" ");
                }
                else if(minpq.size()<maxpq.size()){
                    System.out.print(maxpq.peek()+" ");
                }
            }
        }
    
    }
}
