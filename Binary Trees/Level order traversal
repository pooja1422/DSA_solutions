For a given a Binary Tree of type integer, print it in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion and a single space will separate them.
Example:
10
20 30 
40 50 60
Where each new line denotes the level in the tree.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
10 20 30 40 50 -1 60 -1 -1 -1 -1 -1 -1 
Sample Output 1:
10 
20 30 
40 50 60 

import java.util.*;

public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
	Queue<BinaryTreeNode<Integer>> pendingNodes= new LinkedList<>();
        pendingNodes.add(root);
        pendingNodes.add(null);
        
        while(!pendingNodes.isEmpty()){
            BinaryTreeNode<Integer> front= pendingNodes.poll();
            if(front==null){
                if(pendingNodes.isEmpty()){
                    break;
                }
                else{
                    System.out.println();
                    pendingNodes.add(null);
                }
            }
            else{                
            System.out.print(front.data +" ");
            if(front.left!= null){
                pendingNodes.add(front.left);
            }
            if(front.right!= null){
                pendingNodes.add(front.right);
            }
           }
        }
        
	}
	
}
