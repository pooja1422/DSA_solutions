For a given postorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the Postorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
4 5 2 6 7 3 1 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 

public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		//Your code goes here
	return help(postOrder,inOrder,0,inOrder.length-1,0,postOrder.length-1);
	}
    public static BinaryTreeNode<Integer> help(int[] post,int[] in,int inS,int inE,int preS,int preE){
       if(inS > inE) 
         return null;
        
        int root=post[preE];
        BinaryTreeNode<Integer> ans=new BinaryTreeNode<Integer>(root);
        int index=-1;
        for(int i=0;i<in.length;i++){
            if(in[i]==root){
                index=i;
                break;
            }
        }
        if(index==-1){
          return null;  
        }
        int leftInS =inS;
        int leftInE =index-1;
        int leftPreS=preS;
        int leftPreE=leftPreS+leftInE-leftInS;
        
        int rightInS=index+1;
        int rightInE=inE;
        int rightPreS=leftPreE+1;
        int rightPreE=preE-1;
        // the main problem is created by leftPreE
        // the actual concept is leftpreE-leftpreS=rightpreE-rightpreS;
        ans.left= help(post, in, leftInS, leftInE, leftPreS, leftPreE);
        ans.right=help(post, in, rightInS, rightInE, rightPreS, rightPreE);
        return ans;    
    } 
    

}
