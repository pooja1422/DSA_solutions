Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	
//   public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){


// 		// Write your code here
// 	if(root == null || root.next == null) {
//     return null;
//   }
//          int numChildren = root.children.size();
 
//     // Recur calling for every child
//     for (int i = 0; i < numChildren; i++)
//         findNextLargerNode(root.children.get(i), n);
//     return res;
//   TreeNode<Integer> max = root;
//   TreeNode<Integer> smax =null;

  
// 	public static 
// }
public static void change(TreeNode<Integer> root, int m ){
        if(root==null){
            return;
        }
        if(root.data==m){
            root.data = Integer.MIN_VALUE;
        }
        for(TreeNode<Integer> child: root.children){
            change(child, m );
            
        }
        return;
       
    }
    public static TreeNode<Integer> Largest(TreeNode<Integer> root){
        if(root==null){
            return root;
        }
        TreeNode<Integer> maxnode = root;
       
        for(int i =0; i<root.children. size(); i++){
            TreeNode<Integer> node =  Largest(root.children.get(i));
            if(node.data>maxnode.data){
                maxnode  =node;
                
            }
        }
        return maxnode;
       
        
    }
    public static TreeNode<Integer> findSecondLargest(TreeNode<Integer>root){
        TreeNode<Integer> largest = Largest( root);
        int data = largest.data;
        change(root, data);
        return Largest( root);
        
        
    }
	
	
}
